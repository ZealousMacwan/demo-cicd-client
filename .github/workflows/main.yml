
name: Release Workflow

on:
  push:
    branches:
      - main
      - dev/*
      - release/*

jobs:
  release:
    name: Semantic Release with Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: |
          npm install --save-dev semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/github @semantic-release/git

      - name: Install Dependencies
        run: npm install

      - name: Extract Base Version from Branch Name
        id: extract_version
        run: |
          # Get the current branch name
          branch_version=$(echo "${GITHUB_REF##*/}")
          echo "Full Reference: $GITHUB_REF"
          echo "Extracted branch name: $branch_version"
          
          # Check if it's in the format X.Y.Z (adjust this for release branches)
          if [[ $branch_version =~ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            base_version="${BASH_REMATCH[1]}"
            echo "Branch version found: $base_version"
          else
            # Default to 1.0.0 if no specific base version is found
            echo "Branch version not found. Using default version: 1.0.0"
            base_version="1.0.0"
          fi
          echo "Base version: $base_version"
          echo "base_version=$base_version" >> $GITHUB_ENV        

      - name: Get Git Commit Hash
        id: vars
        run: echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get Version from Semantic Release
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}      
        id: get_version
        run: |
          version=$(npx semantic-release --dry-run --tag "${{ env.base_version }}"| grep -oE 'next .* version is [0-9]+\.[0-9]+\.[0-9]+' | awk '{print $5}')
          # Check if the version is empty
          if [[ -z "$version" ]]; then
            echo "Error: Version could not be determined."
            exit 1  # Fail the step
          else
            echo "Version: $version"
            echo "version=$version" >> $GITHUB_ENV
          fi

      - name: Build Docker Image with Version and Commit Hash
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/demo-cicd-client:${{ env.version }}-${{ env.commit_hash }} .

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Push Docker Image with Version and Commit Hash
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/demo-cicd-client:${{ env.version }}-${{ env.commit_hash }}

      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --tag "${{ env.base_version }}"